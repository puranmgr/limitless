{"version":3,"sources":["App.js","index.js"],"names":["accessKey","process","App","useState","images","setImages","page","setPage","query","setQuery","getPhotos","useCallback","apiUrl","fetch","then","res","json","data","imagesFromApi","results","useEffect","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","dataLength","length","next","hasMore","loader","map","image","index","key","href","links","html","rel","src","urls","regular","alt","alt_description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAIMA,G,MAAYC,+CAEH,SAASC,IAAO,IAAD,EAEAC,mBAAS,IAFT,mBAErBC,EAFqB,KAEbC,EAFa,OAGJF,mBAAS,GAHL,mBAGrBG,EAHqB,KAGfC,EAHe,OAIFJ,mBAAS,IAJP,mBAIrBK,EAJqB,KAIdC,EAJc,KAMtBC,EAAYC,uBAAY,WAC5B,IAAIC,EAAM,mCACNJ,IAAOI,EAAM,uDAAmDJ,IAEpEI,GAAM,gBAAaN,GACnBM,GAAM,qBAAkBZ,GAExBa,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAU,IAAD,EAERC,EAAa,UAAGD,EAAKE,eAAR,QAAmBF,EAEzB,IAATX,GAAYD,EAAUa,GAE1Bb,GAAU,SAAAD,GAAM,4BAAQA,GAAR,YAAmBc,YAGtC,CAACZ,EAAME,IAoBV,OAlBAY,qBAAU,WACRV,MACC,CAACJ,EAAMI,IAiBR,yBAAKW,UAAU,OACb,iDAEA,0BAAMC,SAjBV,SAAsBC,GACpBA,EAAEC,iBACFjB,EAAQ,GACRG,MAeI,2BACEe,KAAK,OAAOC,YAAY,kBACxBC,MAAOnB,EACPoB,SAAU,SAAAL,GAAC,OAAId,EAASc,EAAEM,OAAOF,UAEnC,2CAGF,kBAAC,IAAD,CACEG,WAAY1B,EAAO2B,OACnBC,KAAM,kBAAMzB,GAAQ,SAAAD,GAAI,OAAIA,EAAO,MACnC2B,SAAS,EACTC,OAAQ,2CAER,yBAAKb,UAAU,cACZjB,EAAO+B,KAAI,SAACC,EAAOC,GAAR,OACV,uBAAGhB,UAAU,QAAQiB,IAAKD,EAAOE,KAAMH,EAAMI,MAAMC,KAAMZ,OAAO,SAASa,IAAI,uBAC3E,yBAAKC,IAAKP,EAAMQ,KAAKC,QAASC,IAAKV,EAAMW,yBCpEvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.d6dc3d60.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './App.css';\n\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n\nexport default function App() {\n\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState('');\n\n  const getPhotos = useCallback(() => {\n    let apiUrl = `https://api.unsplash.com/photos?`;\n    if (query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`;\n\n    apiUrl += `&page=${page}`\n    apiUrl += `&client_id=${accessKey}`\n\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((data) => {\n\n        const imagesFromApi = data.results ?? data;\n\n        if (page === 1) setImages(imagesFromApi);\n\n        setImages(images => [...images, ...imagesFromApi]);\n\n      });\n  }, [page, query]);\n\n  useEffect(() => {\n    getPhotos();\n  }, [page, getPhotos]);\n\n\n  function searchPhotos(e) {\n    e.preventDefault();\n    setPage(1);\n    getPhotos();\n\n  }\n\n  // return an error if there is no access key \n  if (!accessKey) {\n    return (\n      <a href=\"https://unsplash.com/developers\" className=\"error\">Required: Get Your Unsplash API Key First</a>\n    )\n  }\n  return (\n    <div className=\"app\">\n      <h1>L I M I T L E S S</h1>\n\n      <form onSubmit={searchPhotos} >\n        <input\n          type=\"text\" placeholder=\"Search Photos..\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n\n      <InfiniteScroll\n        dataLength={images.length}\n        next={() => setPage(page => page + 1)}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n      >\n        <div className=\"image-grid\">\n          {images.map((image, index) => (\n            <a className=\"image\" key={index} href={image.links.html} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img src={image.urls.regular} alt={image.alt_description} />\n            </a>\n          ))}\n        </div>\n      </InfiniteScroll >\n    </div >\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}